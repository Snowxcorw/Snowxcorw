/
const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const bodyParser = require("body-parser");
const cors = require("cors");

// Initialize App
dotenv.config();
const app = express();

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Database Connection
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Database connected"))
  .catch((err) => console.log(err));

// Routes
const bountyRoutes = require("./routes/bounties");
app.use("/api/bounties", bountyRoutes);

// Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const mongoose = require("mongoose");

const bountySchema = mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  reward: { type: Number, required: true },
  status: { type: String, default: "open" }, // open, in progress, completed
  requester: { type: String, required: true }, // user id
  hunter: { type: String }, // user id
}, { timestamps: true });

module.exports = mongoose.model("Bounty", bountySchema);
const express = require("express");
const router = express.Router();
const { createBounty, getBounties } = require("../controllers/bountyController");

// Routes
router.post("/", createBounty); // Create a new bounty
router.get("/", getBounties);   // Get all bounties

module.exports = router;
const Bounty = require("../models/Bounty");

// Create a new bounty
exports.createBounty = async (req, res) => {
  const { title, description, reward, requester } = req.body;

  try {
    const newBounty = new Bounty({ title, description, reward, requester });
    await newBounty.save();
    res.status(201).json(newBounty);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Get all bounties
exports.getBounties = async (req, res) => {
  try {
    const bounties = await Bounty.find();
    res.status(200).json(bounties);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
MONGO_URI=your_mongodb_connection_string
